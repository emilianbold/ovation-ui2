/**
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package us.physion.ovation.ui.detailviews;


import java.awt.Color;
import java.util.*;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JTree;
import javax.swing.tree.DefaultMutableTreeNode;
import javax.swing.tree.DefaultTreeModel;
import org.netbeans.api.settings.ConvertAsProperties;
import org.openide.awt.ActionID;
import org.openide.awt.ActionReference;
import org.openide.explorer.ExplorerManager;
import org.openide.util.Lookup;
import org.openide.util.LookupEvent;
import org.openide.util.LookupListener;
import org.openide.util.NbBundle.Messages;
import org.openide.util.Utilities;
import org.openide.windows.TopComponent;
import us.physion.ovation.DataContext;
import us.physion.ovation.ui.*;
import us.physion.ovation.ui.interfaces.ConnectionProvider;
import us.physion.ovation.ui.interfaces.EventQueueUtilities;
import us.physion.ovation.ui.interfaces.IEntityWrapper;


@ConvertAsProperties(dtd = "-//us.physion.ovation.detailviews//TagsView//EN",
autostore = false)
@TopComponent.Description(preferredID = "TagsViewTopComponent",
//iconBase="SET/PATH/TO/ICON/HERE",
persistenceType = TopComponent.PERSISTENCE_ALWAYS)
@TopComponent.Registration(mode = "properties", openAtStartup = true)
@ActionID(category = "Window", id = "us.physion.ovation.detailviews.TagsViewTopComponent")
@ActionReference(path = "Menu/Window" /*
 * , position = 333
 */)
@TopComponent.OpenActionRegistration(displayName = "#CTL_TagsViewAction",
preferredID = "TagsViewTopComponent")
@Messages({
    "CTL_TagsViewAction=Keyword Tags",
    "CTL_TagsViewTopComponent=Keywords",
    "HINT_TagsViewTopComponent=This is a Keyword Tags window"
})
public final class TagsViewTopComponent extends TopComponent {

    private DefaultComboBoxModel tagComboModel = new DefaultComboBoxModel(new String[] {});
    Lookup.Result global;
    private Collection<? extends IEntityWrapper> entities;
    private LookupListener listener = new LookupListener() {

        @Override
        public void resultChanged(LookupEvent le) {

            //TODO: we should have some other Interface for things that can update the tags view
            //then we could get rid of the Library dependancy on the Explorer API
            if (TopComponent.getRegistry().getActivated() instanceof ExplorerManager.Provider)
            {
                update();
            }
        }
    };

    protected void addTags(final Collection<? extends IEntityWrapper> entities, String tags) {
        final String[] tagList = tags.split(",");
        EventQueueUtilities.runOffEDT(new Runnable() {
            @Override
            public void run() {
                updateTagList(tagList);
            }
        });
    }

    protected void update()
    {
        entities = global.allInstances();
        EventQueueUtilities.runOffEDT(new Runnable()
        {
            @Override
            public void run()
            {
                update(entities, Lookup.getDefault().lookup(ConnectionProvider.class).getDefaultContext());
            }
        });
    }

    protected List<TableTreeKey> update(Collection<? extends IEntityWrapper> entities, DataContext c)
    {
        List<TableTreeKey> tags = PerUserAnnotationSets.createTagSets(entities, c);
        ((ScrollableTableTree) tagTree).setKeys(tags);

        this.entities = entities;
        return tags;
    }

    //TODO: refactor
    protected void updateTagList(String[] newTags)
    {
        JTree tree = ((ScrollableTableTree) tagTree).getTree();
        DefaultMutableTreeNode n = (DefaultMutableTreeNode)((DefaultTreeModel)tree.getModel()).getRoot();

        DefaultMutableTreeNode currentUserNode = (DefaultMutableTreeNode)n.getChildAt(0);
        final DefaultMutableTreeNode tagTableNode = (DefaultMutableTreeNode)currentUserNode.getChildAt(0);
        if (tagTableNode instanceof TableNode)
        {
            final TableNode node = (TableNode)tagTableNode;
            EditableTableModel m = ((EditableTableModel)node.getPanel().getTable().getModel());
            for (String tag : newTags)
            {
                m.setValueAt(tag, m.getRowCount() -1, 0);
            }
            ((ScrollableTableTree)tagTree).resizeNode(node);
        }
    }

    public TagsViewTopComponent() {
        initComponents();
        //this.add(tagTree);
        setName(Bundle.CTL_TagsViewTopComponent());
        setToolTipText(Bundle.HINT_TagsViewTopComponent());
        setBackground(Color.white);
        global = Utilities.actionsGlobalContext().lookupResult(IEntityWrapper.class);
        global.addLookupListener(listener);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        addTagComboBox = new javax.swing.JComboBox();
        jLabel1 = new javax.swing.JLabel();
        tagTree = new us.physion.ovation.ui.ScrollableTableTree();

        addTagComboBox.setBackground(java.awt.Color.white);
        addTagComboBox.setEditable(true);
        addTagComboBox.setModel(tagComboModel);
        addTagComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addTagComboBoxActionPerformed(evt);
            }
        });

        jLabel1.setBackground(java.awt.Color.white);
        org.openide.awt.Mnemonics.setLocalizedText(jLabel1, org.openide.util.NbBundle.getMessage(TagsViewTopComponent.class, "TagsViewTopComponent.jLabel1.text")); // NOI18N

        tagTree.setBorder(null);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 74, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(addTagComboBox, 0, 485, Short.MAX_VALUE)
                .addContainerGap())
            .addComponent(tagTree, javax.swing.GroupLayout.Alignment.TRAILING)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(addTagComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 16, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(tagTree, javax.swing.GroupLayout.PREFERRED_SIZE, 611, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void addTagComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addTagComboBoxActionPerformed

        if (evt.getActionCommand().equals("comboBoxEdited"))
        {
            //add tag
            String tags = addTagComboBox.getSelectedItem().toString();
            addTags(entities, tags);
            tagComboModel.removeAllElements();
            addTagComboBox.setSelectedItem("");
            addTagComboBox.setSelectedItem(null);
        }
    }//GEN-LAST:event_addTagComboBoxActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox addTagComboBox;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane tagTree;
    // End of variables declaration//GEN-END:variables
    @Override
    public void componentOpened() {
        // TODO add custom code on component opening
    }

    @Override
    public void componentClosed() {
        // TODO add custom code on component closing
    }

    void writeProperties(java.util.Properties p) {
        // better to version settings since initial version as advocated at
        // http://wiki.apidesign.org/wiki/PropertyFiles
        p.setProperty("version", "1.0");
        // TODO store your settings
    }

    void readProperties(java.util.Properties p) {
        String version = p.getProperty("version");
        // TODO read your settings according to their version
    }
}
