/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package us.physion.ovation.ui.browser.insertion;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.beans.PropertyChangeEvent;
import java.beans.PropertyChangeListener;
import org.joda.time.DateTime;
import static us.physion.ovation.ui.browser.insertion.DatePickers.zonedDate;
import us.physion.ovation.ui.interfaces.DateTimePicker;

/**
 *
 * @author huecotanks
 */
public class StartAndEndPanel extends javax.swing.JPanel {

    DateTimePicker startPicker;
    DateTimePicker endPicker;

    DateTime start;
    DateTime end;

    @Override
    public String getName()
    {
        return "Epoch: Set start and end";
    }

    /**
     * Creates new form StartAndEndPanel
     */
    public StartAndEndPanel(boolean checkboxes) {
        initComponents();//sets combo box models + layout
        startPicker = DatePickers.createDateTimePicker();
        startPicker.addPropertyChangeListener(new PropertyChangeListener() {
            @Override
            public void propertyChange(PropertyChangeEvent propertyChangeEvent) {
                if ("date".equals(propertyChangeEvent.getPropertyName())) {
                    startDateTimeChanged();
                }
            }
        });

        startZonePicker.setSelectedItem(DatePickers.getID(startPicker));
        startPanel.setViewportView(startPicker);
        startZonePicker.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                startDateTimeChanged();
            }
        });


        endPicker = DatePickers.createDateTimePicker();
        endPicker.addPropertyChangeListener(new PropertyChangeListener() {
            @Override
            public void propertyChange(PropertyChangeEvent propertyChangeEvent) {
                if ("date".equals(propertyChangeEvent.getPropertyName())) {
                    endDateTimeChanged();
                }
            }
        });

        endZonePicker.setSelectedItem(DatePickers.getID(endPicker));
        endZonePicker.addActionListener(new ActionListener() {

            @Override
            public void actionPerformed(ActionEvent e) {
                endDateTimeChanged();
            }
        });

        endPanel.setViewportView(endPicker);

        start = null;
        end = null;

        if (!checkboxes)
        {
            includeProtocolInfo.setSelected(true);
            includeDeviceInfo.setSelected(true);
            includeProtocolInfo.setVisible(false);
            includeDeviceInfo.setVisible(false);

        }
    }


    protected void startDateTimeChanged() {
        start = zonedDate(startPicker, startZonePicker);
    }

    protected void endDateTimeChanged() {
        end = zonedDate(endPicker, endZonePicker);
    }

    public DateTime getStart()
    {
        return start;
    }

    public DateTime getEnd()
    {
        return end;
    }

    public boolean includeProtocolInfo()
    {
        return includeProtocolInfo.isSelected();
    }
    public boolean includeDeviceInfo()
    {
        return includeDeviceInfo.isSelected();
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        startZonePicker = new javax.swing.JComboBox();
        endZonePicker = new javax.swing.JComboBox();
        startPanel = new javax.swing.JScrollPane();
        endPanel = new javax.swing.JScrollPane();
        includeProtocolInfo = new javax.swing.JCheckBox();
        includeDeviceInfo = new javax.swing.JCheckBox();

        org.openide.awt.Mnemonics.setLocalizedText(jLabel1, org.openide.util.NbBundle.getMessage(StartAndEndPanel.class, "StartAndEndPanel.jLabel1.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(jLabel2, org.openide.util.NbBundle.getMessage(StartAndEndPanel.class, "StartAndEndPanel.jLabel2.text")); // NOI18N

        startZonePicker.setModel(new javax.swing.DefaultComboBoxModel(us.physion.ovation.ui.browser.insertion.DatePickers.getTimeZoneIDs()));

        endZonePicker.setModel(new javax.swing.DefaultComboBoxModel(us.physion.ovation.ui.browser.insertion.DatePickers.getTimeZoneIDs()));

        org.openide.awt.Mnemonics.setLocalizedText(includeProtocolInfo, org.openide.util.NbBundle.getMessage(StartAndEndPanel.class, "StartAndEndPanel.includeProtocolInfo.text")); // NOI18N
        includeProtocolInfo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                includeProtocolInfoActionPerformed(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(includeDeviceInfo, org.openide.util.NbBundle.getMessage(StartAndEndPanel.class, "StartAndEndPanel.includeDeviceInfo.text")); // NOI18N

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .addContainerGap()
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(layout.createSequentialGroup()
                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                            .add(layout.createSequentialGroup()
                                .add(jLabel2)
                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                                .add(endPanel, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 192, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                            .add(layout.createSequentialGroup()
                                .add(jLabel1)
                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                                .add(startPanel, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 192, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)))
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(startZonePicker, 0, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .add(endZonePicker, 0, 187, Short.MAX_VALUE)))
                    .add(layout.createSequentialGroup()
                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(includeProtocolInfo)
                            .add(includeDeviceInfo))
                        .add(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .addContainerGap()
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                    .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING, false)
                        .add(startZonePicker)
                        .add(startPanel))
                    .add(jLabel1))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING, false)
                    .add(endZonePicker)
                    .add(org.jdesktop.layout.GroupLayout.TRAILING, jLabel2)
                    .add(endPanel))
                .add(18, 18, 18)
                .add(includeProtocolInfo)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(includeDeviceInfo)
                .addContainerGap(164, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void includeProtocolInfoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_includeProtocolInfoActionPerformed

    }//GEN-LAST:event_includeProtocolInfoActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JScrollPane endPanel;
    private javax.swing.JComboBox endZonePicker;
    private javax.swing.JCheckBox includeDeviceInfo;
    private javax.swing.JCheckBox includeProtocolInfo;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane startPanel;
    private javax.swing.JComboBox startZonePicker;
    // End of variables declaration//GEN-END:variables
}
