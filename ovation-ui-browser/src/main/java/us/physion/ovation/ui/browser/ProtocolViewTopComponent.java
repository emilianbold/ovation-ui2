/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package us.physion.ovation.ui.browser;

import java.util.Map;
import java.util.UUID;
import javax.swing.event.ChangeEvent;
import javax.swing.event.ChangeListener;
import org.netbeans.api.settings.ConvertAsProperties;
import org.openide.awt.ActionID;
import org.openide.awt.ActionReference;
import org.openide.util.ChangeSupport;
import org.openide.util.Lookup;
import org.openide.windows.TopComponent;
import org.openide.util.NbBundle.Messages;
import us.physion.ovation.DataContext;
import us.physion.ovation.domain.Protocol;
import us.physion.ovation.ui.browser.insertion.ProtocolSelector;
import us.physion.ovation.ui.interfaces.ConnectionProvider;

/**
 * Top component which displays something.
 */
@ConvertAsProperties(
        dtd = "-//us.physion.ovation.ui.browser//ProtocolView//EN",
        autostore = false)
@TopComponent.Description(
        preferredID = "ProtocolViewTopComponent",
        //iconBase="SET/PATH/TO/ICON/HERE", 
        persistenceType = TopComponent.PERSISTENCE_ALWAYS)
@TopComponent.Registration(mode = "leftSlidingSide", openAtStartup = true)
@ActionID(category = "Window", id = "us.physion.ovation.ui.browser.ProtocolViewTopComponent")
@ActionReference(path = "Menu/Window" /*, position = 333 */)
@TopComponent.OpenActionRegistration(
        displayName = "#CTL_ProtocolViewAction",
        preferredID = "ProtocolViewTopComponent")
@Messages({
    "CTL_ProtocolViewAction=Protocol View",
    "CTL_ProtocolViewTopComponent=Protocol View",
    "HINT_ProtocolViewTopComponent=This window displays all the existing Protocols in the database"
})
public final class ProtocolViewTopComponent extends TopComponent {

    private ChangeSupport changeSupport;
    private DataContext ctx;
    
    public ProtocolViewTopComponent()
    {
        this(Lookup.getDefault().lookup(ConnectionProvider.class).getDefaultContext());
    }
    
    public ProtocolViewTopComponent(DataContext context) {
        this.ctx = context;
        changeSupport = new ChangeSupport(this);
        changeSupport.addChangeListener(new ChangeListener() {

            @Override
            public void stateChanged(ChangeEvent ce) {
                //if new protocol was added, add protocol, and remove it from the list
                boolean somethingChanged = false;
                Map<String, String> newProtocols = ((ProtocolSelector) jPanel1).getNewProtocols();
                for (String name : newProtocols.keySet())
                {
                    ctx.insertProtocol(name, newProtocols.get(name));
                    somethingChanged = true;
                }
                
                
                Map<UUID, String> editedProtocols = ((ProtocolSelector) jPanel1).getEditedProtocols();
                for (UUID id : editedProtocols.keySet())
                {
                    //TODO uncomment
                    //((Protocol)ctx.getObjectWithUuid(id)).setProtocolDocument(editedProtocols.get(id));
                    somethingChanged = true;
                }
                
                if(somethingChanged)
                {
                    ((ProtocolSelector) jPanel1).resetProtocols();
                }
                
            }
        });
        initComponents();
        jPanel1.setVisible(true);
        setName(Bundle.CTL_ProtocolViewTopComponent());
        setToolTipText(Bundle.HINT_ProtocolViewTopComponent());

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jPanel1 = new ProtocolSelector(changeSupport, ctx, false, true);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 396, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 326, Short.MAX_VALUE)
        );

        jScrollPane1.setViewportView(jPanel1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 400, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1)
        );
    }// </editor-fold>//GEN-END:initComponents

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    // End of variables declaration//GEN-END:variables
    @Override
    public void componentOpened() {
        // TODO add custom code on component opening
    }

    @Override
    public void componentClosed() {
        // TODO add custom code on component closing
    }

    void writeProperties(java.util.Properties p) {
        // better to version settings since initial version as advocated at
        // http://wiki.apidesign.org/wiki/PropertyFiles
        p.setProperty("version", "1.0");
        // TODO store your settings
    }

    void readProperties(java.util.Properties p) {
        String version = p.getProperty("version");
        // TODO read your settings according to their version
    }
}
